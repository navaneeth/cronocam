package cmd

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/navaneethkn/cronocam/internal/config"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

var initCmd = &cobra.Command{
	Use:   "init [directory]",
	Short: "Initialize a new configuration file",
	Long: `Create a new configuration file with default settings.
This will create a config.yaml file in the specified directory
with all the default configuration values.`,
	Args: cobra.MaximumNArgs(1),
	RunE: runInit,
}

func init() {
	rootCmd.AddCommand(initCmd)
}

func runInit(cmd *cobra.Command, args []string) error {
	// Determine target directory
	targetDir := "."
	if len(args) > 0 {
		targetDir = args[0]
	}

	// Convert to absolute path
	absPath, err := filepath.Abs(targetDir)
	if err != nil {
		return fmt.Errorf("failed to get absolute path: %v", err)
	}

	// Create directory if it doesn't exist
	if err := os.MkdirAll(absPath, 0755); err != nil {
		return fmt.Errorf("failed to create directory: %v", err)
	}

	// Create default config structure
	defaultConfig := map[string]interface{}{
		"credentials_path": filepath.Join(absPath, "credentials.json"),
		"database_path":   filepath.Join(absPath, "uploads.db"),
		"chunk_size":      config.DefaultChunkSize,
		"max_retries":     config.DefaultMaxRetries,
		"rate_limit": map[string]interface{}{
			"requests_per_second": config.DefaultReqPerSec,
			"max_burst":          config.DefaultMaxBurst,
		},
		"supported_images": config.DefaultSupportedImages,
		"supported_videos": config.DefaultSupportedVideos,
	}

	// Validate config by attempting to marshal to YAML
	_, err = yaml.Marshal(defaultConfig)
	if err != nil {
		return fmt.Errorf("failed to validate config: %v", err)
	}

	// Add comments to the YAML
	configWithComments := fmt.Sprintf(`# CronoCam Configuration File
# This file was automatically generated by 'cronocam init'

# Path to Google Photos API credentials file
# Get this from Google Cloud Console: https://console.cloud.google.com/apis/credentials
%s: %s

# Path to SQLite database for tracking uploaded files
%s: %s

# Maximum chunk size for uploading files (in bytes)
# Default: 5MB
%s: %d

# Maximum number of retries for failed uploads
%s: %d

# Rate limiting settings
%s:
  # Maximum requests per second to Google Photos API
  %s: %d
  # Maximum burst size for rate limiting
  %s: %d

# Supported file formats (comma-separated)
# Images
%s: %s
# Videos
%s: %s
`,
		"credentials_path", defaultConfig["credentials_path"],
		"database_path", defaultConfig["database_path"],
		"chunk_size", defaultConfig["chunk_size"],
		"max_retries", defaultConfig["max_retries"],
		"rate_limit",
		"requests_per_second", defaultConfig["rate_limit"].(map[string]interface{})["requests_per_second"],
		"max_burst", defaultConfig["rate_limit"].(map[string]interface{})["max_burst"],
		"supported_images", defaultConfig["supported_images"],
		"supported_videos", defaultConfig["supported_videos"],
	)

	// Write to file
	configPath := filepath.Join(absPath, "config.yaml")
	if err := os.WriteFile(configPath, []byte(configWithComments), 0644); err != nil {
		return fmt.Errorf("failed to write config file: %v", err)
	}

	fmt.Printf("Created configuration file at: %s\n", configPath)
	fmt.Println("\nNext steps:")
	fmt.Println("1. Get your Google Photos API credentials from https://console.cloud.google.com/apis/credentials")
	fmt.Printf("2. Save the credentials file as: %s\n", defaultConfig["credentials_path"])
	fmt.Println("3. Run 'cronocam setup' to authenticate with Google Photos")
	fmt.Println("4. Start uploading photos with 'cronocam upload [directory]'")

	return nil
}
